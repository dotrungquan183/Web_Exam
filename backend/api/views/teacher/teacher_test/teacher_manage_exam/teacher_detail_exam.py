import traceback
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework.permissions import AllowAny
from rest_framework import status
from api.models import Exam
from api.serializers import ExamsSerializer
from django.utils import timezone
from api.views.auth.authhelper import get_authenticated_user
from django.shortcuts import get_object_or_404



class TeacherDetailExamView(APIView):
    permission_classes = [AllowAny]

    def get(self, request, id):
        try:
            print(f"üîç GET y√™u c·∫ßu chi ti·∫øt k·ª≥ thi ID = {id}")

            user, error_response = get_authenticated_user(request)
            if error_response:
                print("‚ùå L·ªói x√°c th·ª±c token:", error_response.content.decode())
                return error_response

            exam = get_object_or_404(Exam, id=id)

            if exam.user.id != user.id:
                # Tr·∫£ v·ªÅ message theo key 'message' ƒë·ªÉ frontend d·ªÖ x·ª≠ l√Ω
                return Response(
                    {"message": "B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p k·ª≥ thi n√†y."},
                    status=status.HTTP_403_FORBIDDEN,
                )

            serialized = ExamsSerializer(exam)
            print("‚úÖ Tr·∫£ v·ªÅ d·ªØ li·ªáu k·ª≥ thi:", serialized.data)
            return Response(serialized.data, status=status.HTTP_200_OK)

        except Exception as e:
            print("‚ùå L·ªói b·∫•t ng·ªù trong GET:")
            traceback.print_exc()
            return Response(
                {"message": "Internal Server Error", "detail": str(e)},
                status=status.HTTP_500_INTERNAL_SERVER_ERROR,
            )   
    def post(self, request):
        try:
            print("=== B·∫Øt ƒë·∫ßu x·ª≠ l√Ω POST ===")
            print("Headers:", dict(request.headers))
            print("Data:", request.data)

            user, error_response = get_authenticated_user(request)
            if error_response:
                print("L·ªói x√°c th·ª±c token:", error_response.content.decode())
                return error_response

            print("User x√°c th·ª±c th√†nh c√¥ng:", user, type(user))

            data = request.data.copy()

            required_fields = ["name", "grade", "type", "time_start", "time_end"]
            for field in required_fields:
                if field not in data:
                    return Response({"error": f"Missing field: {field}"}, status=status.HTTP_400_BAD_REQUEST)

            time_start = data.get("time_start")
            time_end = data.get("time_end")

            print("Raw time_start:", time_start)
            print("Raw time_end:", time_end)

            start_dt = Exam._meta.get_field("time_start").to_python(time_start)
            end_dt = Exam._meta.get_field("time_end").to_python(time_end)

            if timezone.is_naive(start_dt):
                start_dt = timezone.make_aware(start_dt)
            if timezone.is_naive(end_dt):
                end_dt = timezone.make_aware(end_dt)

            current = timezone.now()

            if start_dt <= current <= end_dt:
                exam_status = "ƒêang di·ªÖn ra"
            elif current < start_dt:
                exam_status = "Ch∆∞a di·ªÖn ra"
            else:
                exam_status = "ƒê√£ k·∫øt th√∫c"

            exam = Exam.objects.create(
                name=data["name"],
                grade=int(data["grade"]),
                type=data["type"],
                time_start=start_dt,
                time_end=end_dt,
                status=exam_status,
                user=user
            )

            serialized = ExamsSerializer(exam)
            print("T·∫°o exam th√†nh c√¥ng:", serialized.data)
            return Response(serialized.data, status=status.HTTP_201_CREATED)

        except Exception as e:
            print("‚ùå L·ªói b·∫•t ng·ªù x·∫£y ra trong post:")
            import traceback
            traceback.print_exc()
            return Response({"error": "Internal Server Error", "detail": str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

    def put(self, request, id):
        try:
            print(f"=== B·∫Øt ƒë·∫ßu x·ª≠ l√Ω PUT k·ª≥ thi ID = {id} ===")

            user, error_response = get_authenticated_user(request)
            if error_response:
                print("L·ªói x√°c th·ª±c token:", error_response.content.decode())
                return error_response

            exam = get_object_or_404(Exam, id=id)

            # Ki·ªÉm tra quy·ªÅn: ch·ªâ owner m·ªõi ƒë∆∞·ª£c update
            if exam.user.id != user.id:
                return Response(
                    {"message": "B·∫°n kh√¥ng c√≥ quy·ªÅn c·∫≠p nh·∫≠t k·ª≥ thi n√†y."},
                    status=status.HTTP_403_FORBIDDEN,
                )

            data = request.data.copy()

            # C√°c tr∆∞·ªùng c√≥ th·ªÉ c·∫≠p nh·∫≠t
            updatable_fields = ["name", "grade", "type", "time_start", "time_end"]

            for field in updatable_fields:
                if field in data:
                    value = data[field]

                    # B·ªè qua n·∫øu gi√° tr·ªã None
                    if value is None:
                        continue

                    if field in ["time_start", "time_end"]:
                        # Chuy·ªÉn datetime string th√†nh ƒë·ªëi t∆∞·ª£ng datetime c√≥ timezone
                        dt = Exam._meta.get_field(field).to_python(value)
                        if timezone.is_naive(dt):
                            dt = timezone.make_aware(dt)
                        setattr(exam, field, dt)
                    elif field == "grade":
                        try:
                            setattr(exam, field, int(value))
                        except (ValueError, TypeError):
                            return Response(
                                {"message": f"Tr∆∞·ªùng {field} ph·∫£i l√† s·ªë nguy√™n h·ª£p l·ªá."},
                                status=status.HTTP_400_BAD_REQUEST,
                            )
                    else:
                        setattr(exam, field, value)

            # T√≠nh l·∫°i tr·∫°ng th√°i k·ª≥ thi
            current = timezone.now()
            if exam.time_start <= current <= exam.time_end:
                exam.status = "ƒêang di·ªÖn ra"
            elif current < exam.time_start:
                exam.status = "Ch∆∞a di·ªÖn ra"
            else:
                exam.status = "ƒê√£ k·∫øt th√∫c"

            exam.save()

            serialized = ExamsSerializer(exam)
            print("C·∫≠p nh·∫≠t k·ª≥ thi th√†nh c√¥ng:", serialized.data)
            return Response(serialized.data, status=status.HTTP_200_OK)

        except Exception as e:
            print("‚ùå L·ªói b·∫•t ng·ªù trong PUT:")
            traceback.print_exc()
            return Response(
                {"message": "Internal Server Error", "detail": str(e)},
                status=status.HTTP_500_INTERNAL_SERVER_ERROR,
            )
    def delete(self, request, id):
        try:
            user, error_response = get_authenticated_user(request)
            if error_response:
                return error_response
            
            exam = get_object_or_404(Exam, id=id)

            # Ki·ªÉm tra quy·ªÅn: ch·ªâ owner m·ªõi ƒë∆∞·ª£c x√≥a
            if exam.user.id != user.id:
                return Response(
                    {"message": "B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a k·ª≥ thi n√†y."},
                    status=status.HTTP_403_FORBIDDEN,
                )

            exam.delete()

            return Response(
                {"message": "X√≥a k·ª≥ thi th√†nh c√¥ng."},
                status=status.HTTP_204_NO_CONTENT,
            )
        except Exception as e:
            import traceback
            traceback.print_exc()
            return Response(
                {"message": "Internal Server Error", "detail": str(e)},
                status=status.HTTP_500_INTERNAL_SERVER_ERROR,
            )