import React, { useState, useEffect} from "react";
import LatexInputKaTeX, { renderWithLatex } from "./LatexInputKaTeX.js";
import { v4 as uuidv4 } from "uuid";
import { useParams } from 'react-router-dom';
import axios from 'axios';
import "../../../../styles/exam-teacher/TeacherExamAdd.css";
import "../../../../styles/SidebarNavigation.css";
import "../../../../styles/exam-teacher/TeacherExamCode.css";
import iconAddQuestion from "../../../../assets/icon/icon-add.png";
import iconCancelQuestion from "../../../../assets/icon/icon-cancel.png";
import iconCorrect from "../../../../assets/icon/icon-correct.png";
import iconEdit from "../../../../assets/icon/icon-edit.png";
import iconDelete from "../../../../assets/icon/icon-delete.png";
import { FaSave } from "react-icons/fa";
function TeacherExamCode() {
  const [newQuestions, setNewQuestions] = useState([]);
  const [showNewQuestionForm, setShowNewQuestionForm] = useState(false);
  const [editingIndex, setEditingIndex] = useState(null);
  const { testId } = useParams(); // L·∫•y testId t·ª´ URL
  const [examData, setExamData] = useState({
  name: "",
  level: "",
  grade: "",
  duration_minutes: 0,
  exam_type: "",
  shift: {
    shift_id: "",
    name: "",
    date: "",
    start_time: "",
    end_time: ""
  }
});

  const [, setTestList] = useState([]);
  const handleSave = async () => {
    const userJson = localStorage.getItem("user");
    let token = null;

    if (userJson) {
      try {
        const userObj = JSON.parse(userJson);
        token = userObj.token;
      } catch (error) {
        console.error("L·ªói khi parse user t·ª´ localStorage:", error);
      }
    }

    if (!token) {
      alert("Token kh√¥ng t·ªìn t·∫°i ho·∫∑c l·ªói khi ƒë·ªçc token. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.");
      return;
    }

    const data = {
      name: examData.name,
      level: examData.level,
      grade: examData.grade,
      duration_minutes: examData.duration_minutes,// n·∫øu tr∆∞·ªùng b·∫°n l∆∞u t√™n l√† `duration`, 
      exam_type: examData.exam_type,
      shift_id: examData.shift.shift_id
    };

    const method = testId ? "PUT" : "POST";
    const url = testId
      ? `http://localhost:8000/api/teacher/teacher_test/teacher_manage_exam/teacher_detail_test/${testId}/`
      : "http://localhost:8000/api/teacher/teacher_test/teacher_manage_exam/teacher_detail_test/";

    try {
      const res = await fetch(url, {
        method,
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify(data),
      });

      const resText = await res.text();
      if (res.ok) {
        alert(testId ? "C·∫≠p nh·∫≠t ƒë·ªÅ thi th√†nh c√¥ng!" : "T·∫°o ƒë·ªÅ thi th√†nh c√¥ng!");
        // navigate("/teacher/exams");
      } else {
        const errorJson = JSON.parse(resText);
        alert(`L·ªói: ${errorJson.error || "Kh√¥ng x√°c ƒë·ªãnh"}`);
      }
    } catch (error) {
      console.error("L·ªói khi l∆∞u k·ª≥ thi:", error);
      alert("Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi server.");
    }
  };
  useEffect(() => {
  const fetchTestDetail = async () => {
    // üîê L·∫•y token t·ª´ localStorage
    const userJson = localStorage.getItem("user");
    let token = null;

    if (userJson) {
      try {
        const userObj = JSON.parse(userJson);
        token = userObj.token;
      } catch (error) {
        console.error("‚ùå L·ªói khi parse user t·ª´ localStorage:", error);
      }
    }

    // ‚ö†Ô∏è N·∫øu kh√¥ng c√≥ token th√¨ d·ª´ng l·∫°i
    if (!token) {
      alert("Token kh√¥ng t·ªìn t·∫°i ho·∫∑c l·ªói khi ƒë·ªçc token. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.");
      return;
    }

    // üì¶ G·ªçi API v·ªõi header Authorization
    try {
      const response = await axios.get(
        `http://localhost:8000/api/teacher/teacher_test/teacher_manage_exam/teacher_detail_test/${testId}`,
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );

      const data = response.data;
      console.log('‚úÖ D·ªØ li·ªáu l·∫•y ƒë∆∞·ª£c t·ª´ API:', data);

      // üìù C·∫≠p nh·∫≠t state
      setExamData({
        name: data.name || '',
        level: data.level || '',
        grade: data.grade || '',
        duration_minutes: data.duration_minutes || '',
        exam_type: data.exam_type || '',
        shift: data.shift || {
          shift_id: '',
          name: '',
          date: '',
          start_time: '',
          end_time: ''
        }
      });

      setTestList(data.tests || []);
    } catch (error) {
      console.error('‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu ƒë·ªÅ thi:', error);
    }
  };

  fetchTestDetail();
}, [testId]);


  const createNewQuestion = () => ({
    content: "",
    options: [
      { id: uuidv4(), text: "" },
      { id: uuidv4(), text: "" },
      { id: uuidv4(), text: "" },
      { id: uuidv4(), text: "" },
    ],
    correct_option_id: "",
  });

  const [newQuestion, setNewQuestion] = useState(createNewQuestion());

  const handleAddOption = () => {
    setNewQuestion((prev) => ({
      ...prev,
      options: [...prev.options, { id: uuidv4(), text: "" }],
    }));
  };

  const handleDeleteOption = (id) => {
    if (newQuestion.options.length <= 2) {
      alert("M·ªói c√¢u h·ªèi ph·∫£i c√≥ √≠t nh·∫•t 2 ƒë√°p √°n.");
      return;
    }
    setNewQuestion((prev) => ({
      ...prev,
      options: prev.options.filter((opt) => opt.id !== id),
    }));
    if (newQuestion.correct_option_id === id) {
      setNewQuestion((prev) => ({ ...prev, correct_option_id: "" }));
    }
  };

  const handleAddOrEditQuestion = () => {
    if (!newQuestion.content.trim()) {
      alert("Vui l√≤ng nh·∫≠p n·ªôi dung c√¢u h·ªèi.");
      return;
    }
    if (newQuestion.options.some((opt) => !opt.text.trim())) {
      alert("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß n·ªôi dung c√°c ƒë√°p √°n.");
      return;
    }
    if (!newQuestion.correct_option_id) {
      alert("Vui l√≤ng ch·ªçn ƒë√°p √°n ƒë√∫ng.");
      return;
    }

    if (editingIndex !== null) {
      const updated = [...newQuestions];
      updated[editingIndex] = newQuestion;
      setNewQuestions(updated);
    } else {
      setNewQuestions((prev) => [...prev, newQuestion]);
    }

    setNewQuestion(createNewQuestion());
    setEditingIndex(null);
    setShowNewQuestionForm(false);
  };

  const handleEditQuestion = (index) => {
    setNewQuestion(newQuestions[index]);
    setEditingIndex(index);
    setShowNewQuestionForm(true);
  };

  const handleDeleteQuestion = (index) => {
    if (window.confirm("B·∫°n c√≥ ch·∫Øc mu·ªën xo√° c√¢u h·ªèi n√†y kh√¥ng?")) {
      setNewQuestions((prev) => prev.filter((_, i) => i !== index));
    }
  };

  const handleToggleQuestionForm = () => {
    setShowNewQuestionForm(!showNewQuestionForm);
    setEditingIndex(null);
    setNewQuestion(createNewQuestion());
  };

  return (
    <div style={{ display: "flex", padding: "20px" }}>
      {/* MAIN CONTENT */}
      <div style={{ flex: 1, paddingRight: "280px" }}>
        <h2>
          M√£ ƒë·ªÅ:{" "}
          <input
            type="text"
            className="border p-2 rounded"
            value={examData.name}
            onChange={(e) => setExamData({ ...examData, name: e.target.value })}
            placeholder="Nh·∫≠p m√£ ƒë·ªÅ"
          />
        </h2>
        <hr />

        {/* DANH S√ÅCH C√ÇU H·ªéI */}
        {newQuestions.map((q, index) => (
          <div key={`q-${index}`} className="question-item">
            <div className="action-buttons">
              <button className="edit-btn" onClick={() => handleEditQuestion(index)}>
                <img src={iconEdit} alt="edit" className="btn-icon" /> S·ª≠a
              </button>
              <button className="delete-btn" onClick={() => handleDeleteQuestion(index)}>
                <img src={iconDelete} alt="delete" className="btn-icon" /> Xo√°
              </button>
            </div>
            <p><strong>C√¢u {index + 1}:</strong> {renderWithLatex(q.content)}</p>
            <ul>
              {q.options.map((opt, idx) => (
                <li key={opt.id}>
                  <strong>{String.fromCharCode(65 + idx)}</strong>. {renderWithLatex(opt.text)}
                  {q.correct_option_id === opt.id && (
                    <span className="correct-answer">
                      <img src={iconCorrect} alt="correct" className="btn-icon" /> ƒê√°p √°n ƒë√∫ng
                    </span>
                  )}
                </li>
              ))}
            </ul>
          </div>
        ))}

        {/* N√öT TH√äM C√ÇU H·ªéI */}
        <div style={{ marginTop: "20px" }}>
          <button onClick={handleToggleQuestionForm} className="btn addquestion">
            <img
              src={showNewQuestionForm ? iconCancelQuestion : iconAddQuestion}
              alt="toggle"
              className="btn-icon"
            />
            {showNewQuestionForm ? (editingIndex !== null ? "Hu·ª∑ s·ª≠a" : "Hu·ª∑ th√™m") : "Th√™m c√¢u h·ªèi"}
          </button>
        </div>

        {/* FORM TH√äM/S·ª¨A */}
        {showNewQuestionForm && (
          <div className="question-form">
            <h4>{editingIndex !== null ? "S·ª≠a c√¢u h·ªèi" : "Th√™m c√¢u h·ªèi m·ªõi"}</h4>

            <div className="form-section">
              <label style={{ marginBottom: "10px", display: "block" }}>N·ªôi dung c√¢u h·ªèi:</label>
              <LatexInputKaTeX
                value={newQuestion.content}
                onChange={(value) => setNewQuestion({ ...newQuestion, content: value })}
                style={{ width: "90%", minHeight: "100px" }} // n·∫øu component h·ªó tr·ª£ style
              />
            </div>

            <div className="form-section">
              <label style={{ marginBottom: "10px", display: "block" }}>Danh s√°ch ƒë√°p √°n:</label>
              {newQuestion.options.map((opt, idx) => (
                <div key={opt.id} style={{ display: "flex", alignItems: "center", marginBottom: "8px" }}>
                  <LatexInputKaTeX
                    value={opt.text}
                    onChange={(value) => {
                      const updatedOptions = newQuestion.options.map((o) =>
                        o.id === opt.id ? { ...o, text: value } : o
                      );
                      setNewQuestion({ ...newQuestion, options: updatedOptions });
                    }}
                  />
                  <input
                    type="radio"
                    name="correct_option"
                    checked={newQuestion.correct_option_id === opt.id}
                    onChange={() => setNewQuestion({ ...newQuestion, correct_option_id: opt.id })}
                    style={{ marginLeft: "8px" }}
                  />
                  <button onClick={() => handleDeleteOption(opt.id)} style={{ marginLeft: "8px" }}>
                    ‚ùå
                  </button>
                </div>
              ))}
              <button
                onClick={handleAddOption}
                style={{
                  marginTop: "10px",
                  padding: "10px 20px", // TƒÉng chi·ªÅu cao c·ªßa n√∫t
                  borderRadius: "8px",  // Bo g√≥c
                  backgroundColor: "#ffffff", // M√†u n·ªÅn tr·∫Øng
                  border: "1px solid #ccc", // ƒê∆∞·ªùng vi·ªÅn m·ªù
                  cursor: "pointer", // ƒê·ªïi con tr·ªè khi hover
                  fontWeight: "bold", // ƒê·∫≠m ch·ªØ
                }}
              >
                ‚ûï Th√™m ƒë√°p √°n
              </button>
            </div>

            <button onClick={handleAddOrEditQuestion} className="save-btn">
              ‚úÖ {editingIndex !== null ? "L∆∞u ch·ªânh s·ª≠a" : "L∆∞u c√¢u h·ªèi"}
            </button>
          </div>
        )}
      </div>

      {/* SIDEBAR TH√îNG TIN K·ª≤ THI */}
      <div className="sidebar-container">
        <div className="exam-form-title">Th√¥ng tin ƒë·ªÅ thi</div>

        <div className="exam-form-row">
          <div className="exam-form-group">
            <label className="exam-form-label">M·ª©c ƒë·ªô ƒë·ªÅ thi</label>
            <input
              type="text"
              className="exam-form-input"
              value={examData.level}
              onChange={(e) => setExamData({ ...examData, level: e.target.value })}
            />
          </div>
        </div>

        <div className="exam-form-row">

          <div className="exam-form-group">
            <label className="exam-form-label">Kh·ªëi</label>
            <select
              className="exam-form-select"
              style={{ minWidth: '245px' }}
              value={examData.grade}
              onChange={(e) => setExamData({ ...examData, grade: e.target.value })}
            >
              <option value="">-- Ch·ªçn kh·ªëi --</option>
              <option value="10">L·ªõp 10</option>
              <option value="11">L·ªõp 11</option>
              <option value="12">L·ªõp 12</option>
            </select>
          </div>
        </div>

        <div className="exam-form-row">
          <div className="exam-form-group">
            <label className="exam-form-label">Th·ªùi l∆∞·ª£ng (ph√∫t)</label>
            <input
              type="number"
              className="exam-form-input"
              value={examData.duration_minutes}
              onChange={(e) => setExamData({ ...examData, duration_minutes: e.target.value })}
              min="1"
              placeholder="Nh·∫≠p s·ªë ph√∫t"
            />
          </div>
        </div>

        <div className="exam-form-row">
          <div className="exam-form-group">
            <label className="exam-form-label">Ca thi</label>
            <input
              type="number"
              className="exam-form-input"
              value={examData.shift?.shift_id || ""}
              onChange={(e) =>
                setExamData({
                  ...examData,
                  shift: {
                    ...examData.shift,
                    shift_id: e.target.value
                  }
                })
              }
              min="1"
              placeholder="Nh·∫≠p ca thi"
            />
          </div>
        </div>

        <div style={{ display: "flex", justifyContent: "flex-end", marginTop: "16px", marginRight: "9px" }}>
          <button className="btn addcode" onClick={handleSave}>
            <FaSave className="btn-icon" /> {testId ? "C·∫≠p nh·∫≠t" : "L∆∞u"}
          </button>
        </div>
      </div>
    </div>
  );
}

export default TeacherExamCode;